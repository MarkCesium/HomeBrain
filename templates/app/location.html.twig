{% extends 'base.html.twig' %}
{% block title %}Location...{% endblock %}
{% block body %}
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title fs-5" id="exampleModalLabel">Add new publisher</h3>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    {{ form_start(form, {'attr': {'id': 'publisher-form', 'action': path('app_add_publisher')}}) }}
                    {{ form_errors(form) }}
                    <div class="mb-3">
                        <label class="form-label vasilek b1">Type</label>
                        {{ form_widget(form.type) }}
                    </div>
                    <div class="mb-3">
                        <label class="form-label vasilek b1">Name</label>
                        {{ form_widget(form.name) }}
                    </div>
                    <div class="mb-3">
                        <label class="form-label vasilek b1">Response type</label>
                        {{ form_widget(form.responseType) }}
                    </div>
                    <div class="publisherDescriptions"
                         data-index="{{ form.publisherDescriptions|length > 0 ? form.publisherDescriptions|last.vars.name + 1 : 0 }}"
                         data-prototype="{{ form_widget(form.publisherDescriptions.vars.prototype)|e('html_attr') }}"
                    ></div>

                    <div id="descriptionForm"></div>
                    <button type="button" class="add_item_link btn-add-room text-center b2"
                            data-collection-holder-class="publisherDescriptions">Add
                        a description
                    </button>
                    {{ form_end(form) }}
                </div>
                <div class="modal-footer">
                    <button type="submit" form="publisher-form" class="btn-add-room text-center b2">Add publisher
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="container-fluid pt-1">
        <div class="row d-flex justify-content-center">
            <h1 class="vasilek text-center my-2" data-bind="text: name"></h1>
        </div>
        <div class="row">
            <div class="my-2 col-12 col-sm-12 col-md-4 col-lg-3 order-md-last">
                <section class="m-0 row rooms-widget text-center d-flex justify-content-center">
                    <h2 class="my-1 col-12 vasilek">Locations</h2>
                    <div class="my-1 col-12 list-group rooms-list p-0">
                        {% for location in locations %}
                            <a href="#{{ location.id }}"
                               class="list-group-item list-group-item-action b2 text-color bg-vasilek-dis"
                               data-bind="click: changeRoom"
                               data-location="{{ location.id }}">{{ location.name }}</a>
                        {% endfor %}
                    </div>
                </section>
            </div>
            <div class="my-2 col-12 col-sm-12 col-md-8 col-lg-9 order-md-first">
                <div class="mt-0 mb-2 px-2 row">
                    <h2 class="text-center vasilek">Sensors</h2>
                    <div class="row mx-0 my-2 px-sm-1 px-md-2 p-0">
                        <div class="m-0 p-0 col-12 col-sm-12 col-md-6 col-lg-4 col-xl-3 d-flex justify-content-center">
                            <div class="add-text b1 vasilek d-flex justify-content-start">
                                <a href="#add_publisher" id="add-sensor"
                                   class="vasilek text-decoration-none d-flex justify-content-center"
                                   data-bs-toggle="modal" data-bs-target="#exampleModal" data-bs-title="sensor"
                                   data-bs-type="2">
                                    <img src="{{ asset('img/svg/plus.svg') }}" alt="add" class="me-1">Add sensor
                                </a>
                            </div>
                        </div>
                    </div>
                    <!-- ko if: sensors().length == 0 -->
                    <h3 class="text-center my-4">You don't have a sensors in this location</h3>
                    <!-- /ko -->
                    <!-- ko if: sensors().length > 0 -->
                    <div class="row mx-0 my-2 px-sm-1 px-md-2 p-0" data-bind="foreach: sensors">
                        <div class="px-0 py-2 col-12 col-sm-6 col-md-6 col-lg-4 col-xl-3 d-flex justify-content-center">
                            <div class="sensor-card d-flex bg-vasilek-dis" data-bind="attr: {id: id}">
                                <div class="flex-row m-auto">
                                    <h3 class="b2 text-center" data-bind="text: name"></h3>
                                    <div class="b2 text-center" data-bind="text: value"></div>
                                    <div class="b3 text-center align-bottom" data-bind="text: updated"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- /ko -->
                </div>
                <div class="my-2 px-2 row">
                    <h2 class="text-center vasilek">Devices</h2>
                    <div class="row mx-0 my-1 px-sm-1 px-md-2 p-0">
                        <div class="col-12 col-sm-12 col-md-6 col-lg-4 col-xl-3 d-flex justify-content-center">
                            <div class="add-text b1 vasilek d-flex justify-content-start">
                                <a href="#add_publisher"
                                   class="vasilek text-decoration-none d-flex justify-content-center"
                                   data-bs-toggle="modal" data-bs-target="#exampleModal" data-bs-title="device"
                                   data-bs-type="1">
                                    <img src="{{ asset('img/svg/plus.svg') }}" alt="add" class="me-1">Add device
                                </a>
                            </div>
                        </div>
                    </div>
                    <!-- ko if: devices().length == 0 -->
                    <h3 class="text-center my-4">You don't have a devices in this location</h3>
                    <!-- /ko -->
                    <!-- ko if: devices().length > 0 -->
                    <div class="row mx-0 my-1 px-sm-1 px-md-2 p-0" data-bind="foreach: devices">
                        <div class="px-0 py-2 col-12 col-sm-6 col-md-6 col-lg-4 col-xl-3 d-flex justify-content-center">
                            <div class="device-card d-flex bg-vasilek-dis" data-bind="attr: {id: 'device:'+id}">
                                <div class="m-auto">
                                    <h3 class="b2 text-center w-100 py-1" data-bind="text: name"></h3>
                                    <!-- ko if: value -->
                                    <input type="button" class="b2 nav-link mx-auto" value="Turn off"
                                           onclick="sendDevice(this)" data-bind="attr: {id: 'deviceinput:'+id}">
                                    <!-- /ko -->
                                    <!-- ko else -->
                                    <input type="button" class="b2 nav-link mx-auto" value="Turn on"
                                           onclick="sendDevice(this)" data-bind="attr: {id: 'deviceinput:'+id}">
                                    <!-- /ko -->
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- /ko -->
                </div>
            </div>
        </div>
    </div>
    <script src="knockout.js"></script>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        const socketSensor = new WebSocket("ws://192.168.100.2:3001");
        let interval;
        let viewFunctions = {
            changeRoom: function (data, event) {
                const location = $(event.currentTarget).attr('data-location');
                $('.list-group a.active').removeClass('active');
                $(event.currentTarget).addClass('active');
                window.location.hash = `#${location}`;
                clearInterval(interval);
                if (location === '') {
                    window.location.href = '/';
                    return 0;
                }
                $.get(`/location/${location}/get/publisher`, function (data) {
                    if (data.status === 0) {
                        window.location.href = '/';
                        return 0;
                    }
                    document.title = data.data.name;
                    viewModel.name(data.data.name);
                    for (let sensor of data.data.sensors) {
                        sensor.value = ko.observable(sensor.value);
                        if (sensor.updated !== null) {
                            sensor.updated = ko.observable(timeConverter(sensor.updated));
                        } else {
                            sensor.updated = ko.observable(sensor.updated);
                        }
                        if (sensor.status !== null) {
                            if (sensor.status) {
                                $(`#${sensor.id}`).removeClass('bg-vasilek-dis').removeClass('bg-bad-dis').addClass('bg-good-dis');
                            } else {
                                $(`#${sensor.id}`).removeClass('bg-vasilek-dis').removeClass('bg-good-dis').addClass('bg-bad-dis');
                            }
                        }
                    }
                    for (let device of data.data.devices) {
                        device.value = ko.observable(device.value);
                        device.updated = ko.observable(device.updated);
                    }
                    viewModel.sensors(data.data.sensors);
                    viewModel.devices(data.data.devices)
                });
                interval = setInterval(() => sendData(socketSensor, location), 100);
            }
        }
        let viewModel = {
            name: ko.observable(''),
            sensors: ko.observableArray([]),
            devices: ko.observableArray([]),
            changeRoom: viewFunctions.changeRoom
        }
        ko.applyBindings(viewModel);

        window.addEventListener("DOMContentLoaded", function () {
            let location = window.location.hash.slice(1);
            if (location === '') {
                window.location.href = '/';
                return 0;
            }
            $(`[data-location='${location}']`).addClass('active');
            $.get(`/location/${location}/get/publisher`, function (data) {
                if (data.status === 0) {
                    window.location.href = '/';
                    return 0;
                }
                document.title = data.data.name;
                viewModel.name(data.data.name);
                for (let sensor of data.data.sensors) {
                    sensor.value = ko.observable(sensor.value);
                    if (sensor.updated !== null) {
                        sensor.updated = ko.observable(timeConverter(sensor.updated));
                    } else {
                        sensor.updated = ko.observable(sensor.updated);
                    }
                    if (sensor.status !== undefined) {
                        if (sensor.status) {
                            $(`#${sensor.id}`).removeClass('bg-vasilek-dis').addClass('bg-good-dis');
                        } else {
                            $(`#${sensor.id}`).removeClass('bg-vasilek-dis').addClass('bg-bad-dis');
                        }
                    }
                }
                for (let device of data.data.devices) {
                    device.value = ko.observable(device.value);
                    device.updated = ko.observable(device.updated);
                }
                viewModel.sensors(data.data.sensors);
                viewModel.devices(data.data.devices);
            });
            interval = setInterval(() => sendData(socketSensor, location), 100);
            const exampleModal = document.getElementById('exampleModal')
            exampleModal.addEventListener('show.bs.modal', event => {
                // Button that triggered the modal
                const button = event.relatedTarget;
                const locationId = window.location.hash.slice(1);
                // Extract info from data-bs-* attributes
                const recipient = button.getAttribute('data-bs-title');
                const typeSelect = button.getAttribute('data-bs-type');
                // If necessary, you could initiate an AJAX request here
                // and then do the updating in a callback.

                // Update the modal's content.
                const modalTitle = exampleModal.querySelector('.modal-title');
                const modalTypeInput = exampleModal.querySelector('.modal-body #publisher_type');
                const modalLocationInput = exampleModal.querySelector('.modal-body #publisher_location');

                modalTitle.textContent = `Add new ${recipient}`;
                modalTypeInput.value = typeSelect;
                modalLocationInput.value = locationId;
            })

            document.querySelector('.add_item_link').addEventListener("click", addFormToCollection);

            function addFormToCollection(e) {
                const collectionHolder = document.querySelector('.publisherDescriptions');

                const item = document.createElement('div');
                item.innerHTML = collectionHolder
                    .dataset
                    .prototype
                    .replace(
                        /__name__/g,
                        collectionHolder.dataset.index
                    );

                collectionHolder.appendChild(item);

                collectionHolder.dataset.index++;
            }

            socketSensor.addEventListener('message', function (msg) {
                const data = JSON.parse(msg.data);
                let sensors = viewModel.sensors();
                for (let sensor of sensors) {
                    for (const sensorData of data.data.sensors) {
                        if (sensorData !== null && sensorData.id === sensor.id) {
                            let isOk = true;
                            if (!('validation' in sensorData)) {
                                if (sensor.responseType === "int") {
                                    sensor.value(Math.floor(sensorData.value));
                                } else if (sensor.responseType === "float") {
                                    sensor.value(parseFloat(sensorData.value).toFixed(2))
                                } else if (sensor.responseType === "bool") {
                                    sensor.value('No condition');
                                }
                                sensor.updated(timeConverter(sensorData.updated));
                                break;
                            }
                            for (let status of sensorData.validation) {
                                if (status.isOk && isOk) {
                                    if (sensor.responseType === "int") {
                                        sensor.value(Math.floor(sensorData.value));
                                    } else if (sensor.responseType === "float") {
                                        sensor.value(parseFloat(sensorData.value).toFixed(2))
                                    } else if (sensor.responseType === "bool") {
                                        sensor.value('Okay');
                                    }
                                    $(`#${sensor.id}`).removeClass('bg-vasilek-dis').removeClass('bg-bad-dis').addClass('bg-good-dis');
                                } else {
                                    isOk = false
                                    if (sensor.responseType === "int") {
                                        sensor.value(Math.floor(sensorData.value));
                                    } else if (sensor.responseType === "float") {
                                        sensor.value(parseFloat(sensorData.value).toFixed(2))
                                    } else if (sensor.responseType === "bool") {
                                        sensor.value('Warning!');
                                    }
                                    $(`#${sensor.id}`).removeClass('bg-vasilek-dis').removeClass('bg-good-dis').addClass('bg-bad-dis');
                                }
                            }
                            sensor.updated(timeConverter(sensorData.updated));
                            break;
                        }
                    }
                }

                let devices = viewModel.devices();
                for (let device of devices) {
                    for (const deviceData of data.data.devices) {
                        if (deviceData !== null && deviceData.id === device.id) {
                            if (deviceData.value === 'wait') {
                                document.getElementById(`deviceinput:${deviceData.id}`).value = "Processing...";
                                continue;
                            }
                            if (device.responseType === 'bool') {
                                if (deviceData.value == 1) {
                                    document.getElementById(`deviceinput:${deviceData.id}`).value = "Turn off";
                                    document.getElementById(`device:${deviceData.id}`).classList.remove('bg-vasilek-dis');
                                    document.getElementById(`device:${deviceData.id}`).classList.add('bg-good-dis');
                                } else {
                                    document.getElementById(`deviceinput:${deviceData.id}`).value = "Turn on";
                                    document.getElementById(`device:${deviceData.id}`).classList.remove('bg-good-dis');
                                    document.getElementById(`device:${deviceData.id}`).classList.add('bg-vasilek-dis');
                                }
                            }
                        }
                    }
                }

            })
        });

        function sendData(socket, location) {
            if (socket.readyState !== 1) {
                console.log("Connecting");
                return;
            }
            const data = {
                "type": "getLocation",
                "location": location
            }
            socket.send(JSON.stringify(data));
        }

        function sendDevice(e) {
            if (socketSensor.readyState !== 1) {
                console.log("Connecting");
                return;
            }
            if (e.value === "Turn on" || e.value === "Turn off") {
                e.value = "Processing..."
                const data = {
                    "type": "sendDevice",
                    "device": parseInt(e.parentElement.parentElement.getAttribute('id').split(':')[1]),
                    "value": true
                }
                socketSensor.send(JSON.stringify(data));
            }
        }

        function timeConverter(UNIX_timestamp) {
            const a = new Date(UNIX_timestamp * 1000);
            const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            const month = months[a.getMonth()];
            const date = a.getDate();
            let datetime = (a.getHours() < 10 ? "0" : "") + a.getHours() + ":" + (a.getMinutes() < 10 ? "0" : "") + a.getMinutes() + ":" + (a.getSeconds() < 10 ? "0" : "") + a.getSeconds();
            return `${date}-${month} ${datetime}`;
        }

    </script>
{% endblock %}